import { type NextPage } from "next";
import Head from "next/head";
import { NormalFilterSchema, type IGroup } from '~/common/filter/filter';
import { useHookstate } from '@hookstate/core';
import { api } from "~/utils/api";
import OverlayTrigger from 'react-bootstrap/OverlayTrigger';
import Popover from 'react-bootstrap/Popover';
import Autofill from "~/components/search/normal/autofill";
import { BiHome, BiX } from "react-icons/bi";

import HeaderNEW from "~/components/overall/headerNEW";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import Table from "~/components/search/table";
import ModalLoad from "~/components/search/normal/modalLoad";
import ModalSave from "~/components/search/normal/modalSave";

import { type INormalFilter } from "~/common/filter/filter";
import Footer from "~/components/overall/footer";
import { usePathname } from "next/navigation";
import { Colors } from "~/common/styles";
import Link from "next/link";

const defaultGroup: IGroup = {
    not: false,
    link: 'AND',
    activated: true,
    mandatory: true,
    filter: [{
      col: 'CBH_Donor_ID',
      type: 'equal',
      values: [],
      activated: true,
      mandatory: true,
    }],
    groups: []
  }

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Central BioHub</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="min-h-screen max-h-screen overflow-hidden bg-gray-100">
        <div className="flex flex-col">
          <HeaderNEW />
          <Content />
        </div>
      </div>
    </>
  );
};

export default Home;

const Content: React.FC = () => {
  const defaultFilter: INormalFilter = {
    cbhMasterID: {
      value: undefined,
      mandatory: true
    },
    cbhDonorID: {
      value: undefined,
      mandatory: true
    },
    cbhSampleID: {
      value: undefined,
      mandatory: true
    },
    price: { 
      min: undefined, 
      max: undefined,
      mandatory: true
    },
    matrix: {
      value: [],
      mandatory: true
    },
    quantity: {
      min: undefined,
      max: undefined,
      mandatory: true
    },
    unit: {
      value: [],
      mandatory: true
    },
    labParameter: {
      value: [],
      mandatory: true
    }, 
    resultInterpretation: {
      value: [],
      mandatory: true
    }, 
    resultUnit: {
      value: [],
      mandatory: true
    }, 
    resultNumerical: {
      min: undefined,
      max: undefined,
      mandatory: true
    }, 
    diagnosis: {
      value: [],
      mandatory: true
    }, 
    ICDCode: {
      value: [],
      mandatory: true
    } 
  }

  const defaultShow: boolean[] = []

  /*Search Bar function */
  const router = useRouter()
  const pathname = usePathname();
  const { q, f, c } = router.query
  const [isLoaded, setIsLoaded] = useState<boolean>(false)
  
  const [page, setPage] = useState<number>(1)
  const [pagelength, setPagelength] = useState<number>(50)
  const [search, setSearch] = useState<string | undefined>()
  const [filter, setFilter] = useState<INormalFilter>(defaultFilter)
  const [showSave, setShowSave] = useState(false);
  const [showLoad, setShowLoad] = useState(false);
  const [showFilter, setShowFilter] = useState<boolean>(false)
  const [categoryQuery, setCategoryQuery] = useState<string>("Overall");

  const state = useHookstate<IGroup>(defaultGroup);

  const onCategoryChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    const encodedCategoryQuery = encodeURI(event.target.value);
    void router.push(`/search/newOverall?c=${encodedCategoryQuery}`, undefined, {shallow: true});
    setCategoryQuery(event.target.value)
  };

  for(let i = 0; i < pagelength; i++){
    defaultShow.push(false)
  }

  const { data: samples, refetch: refetchSamples } = api.samples.getAll.useQuery(
    { pages: page, lines: pagelength, search: search, filter: filter }
  )
  const { data: count } = api.samples.countNormal.useQuery({ search: search, filter: filter })
  
  useEffect(() => {
    void refetchSamples()
  }, [search, page, pagelength, filter, refetchSamples])

  useEffect(() => {
    setPage(1)
  }, [search, pagelength, filter])

  useEffect(() => {
    setSearch(q ? q.toString() : undefined)
  }, [q])

  useEffect(() => {
    setCategoryQuery(c ? c.toString() : "Overall")
  }, [c])

  useEffect(() => {
    if(f !== undefined){
      setFilter(NormalFilterSchema.parse(JSON.parse(f.toString())))
      setIsLoaded(true)
    }
  }, [f])

  useEffect(() => {
    if(isLoaded && !(JSON.stringify(filter) === JSON.stringify(defaultFilter))){
      void router.push(`${pathname}?${search ? encodeURIComponent(search) + "&" : ""}f=${encodeURIComponent(JSON.stringify(filter))}`, undefined, {shallow: true})
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [filter, isLoaded])

  function handleFilterChange(value: string, column:string): void {
    switch(column){
      case "Matrix":
        if(!filter.matrix.value.includes(value)){
          const temp1 = filter.matrix
          temp1.value.push(value)
          setFilter(filter => ({...filter, matrix: temp1}))
        }
        break;
      case "Unit":
        if(!filter.unit.value.includes(value)){
          const temp2 = filter.unit
          temp2.value.push(value)
          setFilter(filter => ({...filter, unit: temp2}))
        }
        break;
      case "Lab_Parameter":
        if(!filter.labParameter.value.includes(value)){
          const temp3 = filter.labParameter
          temp3.value.push(value)
          setFilter(filter => ({...filter, labParameter: temp3}))
        }
        break;
      case "Result_Interpretation":
        if(!filter.resultInterpretation.value.includes(value)){
          const temp4 = filter.resultInterpretation
          temp4.value.push(value)
          setFilter(filter => ({...filter, resultInterpretation: temp4}))
        }
        break;
      case "Result_Unit":
        if(!filter.resultUnit.value.includes(value)){
          const temp5 = filter.resultUnit
          temp5.value.push(value)
          setFilter(filter => ({...filter, resultUnit: temp5}))
        }
        break;
      case "Diagnosis":
        if(!filter.diagnosis.value.includes(value)){
          const temp6 = filter.diagnosis
          temp6.value.push(value)
          setFilter(filter => ({...filter, diagnosis: temp6}))
        }
        break;
      case "ICD_Code":
        if(!filter.ICDCode.value.includes(value)){
          const temp7 = filter.ICDCode
          temp7.value.push(value)
          setFilter(filter => ({...filter, ICDCode: temp7}))
        }
        break;
      default:
        break;
    }
  }

  return (
    <div className='max-h-[calc(100vh-80px)] overflow-y-scroll font-poppins'>
      <div className={`flex flex-row w-full items-center justify-center text-[${Colors.dark}] border-[${Colors.dark}]`}>
        <div className="w-full border-2 border-solid h-1 border-inherit rounded-3xl m-5"></div>
        <h1 className="text-5xl mt-5 ml-5 mb-2 flex-grow flex-shrink-0 whitespace-nowrap"><b>OVERALL PRODUCT SEARCH</b></h1>
        <div className="w-full border-2 border-solid h-1 border-inherit rounded-3xl m-5"></div>
      </div>
      
      <div className="px-20">
        <p className={`my-7 text-xl text-center text-[${Colors.dark}]`}>
          <i>Overall search is a tailor-made solution to improve your search by understanding the precise needs and search 
          behavior of life science scientists and biomedical researchers worldwide. Therefore, we provide you with a wide array of search options, helping to dive deeper into our bio inventory 
          to land on your matching human biospecimens within no time. Our inventory is vast, we offer well-annotated, high-quality biological specimens such as human serum, plasma, whole blood, 
          human tissue samples, and more for research purposes.</i>
        </p>

        <div className="flex flex-row text-3xl mt-2 mb-4 items-center font-extralight">
          <Link className="relative top-1" href={"/"}><BiHome/></Link>
          <label className="mx-1">|</label>
          <Link className="text-xl relative top-1" href={"/search/newOverall"}>Overall Search</Link>
          <label className="mx-1">|</label>
          <Link className="text-xl relative top-1" href={`search/newOverall?c=${encodeURI(categoryQuery)}`}>{categoryQuery}</Link>
        </div>

        <div className="flex flex-row w-full">
          <div className="flex flex-row w-[50%] justify-start items-center">
            <button className={`text-xl text-[${Colors.dark}] flex flex-row pl-2 pr-4 rounded-lg`} onClick={() => setShowFilter(!showFilter)}>
              Filter
              <svg width="12" height="21" viewBox="0 0 20 36" fill="none" xmlns="http://www.w3.org/2000/svg" className={`transform translate-y-[4px] rotate-90 ml-2`}>
                  <path opacity="0.4" d="M13.2156 9.00221L0 18.6931L0 33.0375C0 35.4922 3.03565 36.7195 4.81522 34.9808L18.371 21.7359C20.543 19.6136 20.543 16.1617 18.371 14.0394L13.2156 9.00221Z" fill="black"/>
                  <path d="M0 2.76626V18.6961L13.2156 9.00524L4.81522 0.797406C3.03565 -0.915755 0 0.311585 0 2.76626Z" fill="black"/>
              </svg>
            </button>

            <select className={`text-xl mx-3 text-[${Colors.dark}] h-10 flex flex-row pl-2 pr-8 rounded-lg bg-transparent appearance-none bg-[length:1.3rem_auto] bg-[url('/ArrowDown.png')] bg-no-repeat bg-[8.5vw] w-[10vw]`} value={categoryQuery} onChange={onCategoryChange}>
              <option value="Overall">Overall</option>
              <option value="Pregnancy">Pregnancy</option>
              <option value="Infectious Diseases">Infectious Diseases</option>
              <option value="Sexually Transmitted Diseases">Sexually Transmitted Diseases</option>
              <option value="Cancer Samples">Cancer Samples</option>
              <option value="Allergies">Allergies</option>
              <option value="Autoimmune Diseases">Autoimmune Diseases</option>
              <option value="Cardiovascular Diseases">Cardiovascular Diseases</option>
              <option value="Musculoskeletal System and Connective Tissue">Musculoskeletal System and Connective Tissue</option>
              <option value="Endocrine Disorders">Endocrine Disorders</option>
              <option value="COVID 19">COVID 19</option>
              <option value="Gynaecology">Gynaecology</option>
              <option value="Healthy Donors">Healthy Donors</option>
              <option value="Metabolic Disorders">Metabolic Disorders</option>
              <option value="Parasitology">Parasitology</option>
              <option value="Neurological Disorders">Neurological Disorders</option>
              <option value="Respiratory Tract Infections">Respiratory Tract Infections</option>
              <option value="Tropical Infections">Tropical Infections</option>
              <option value="Other Vector Borne Diseases">Other Vector Borne Diseases</option>
              <option value="Specimen Matrix">Specimen Matrix</option>
              <option value="Tissue Bank">Tissue Bank</option>
              <option value="Cell Products">Cell Products</option>
              <option value="Other Biofluids">Other Biofluids</option>
              <option value="Dermatological Diseases">Dermatological Diseases</option>
            </select>
          </div>

          <div className='flex flex-row justify-end w-[50%]'>
            <button className={`w-[10rem] px-4 py-1 text-xl text-center text-[${Colors.dark}] rounded-l-2xl border-solid border-2 bg-[#D8E9D1] hover:bg-[#bfdab4] transition-colors ease-in-out border-[${Colors.dark}] border-r-0`} onClick={() => setShowLoad(true)}>Load Filter</button>
            <button className={`w-[10rem] px-4 py-1 text-xl text-center text-[${Colors.dark}] rounded-r-2xl border-solid border-2 bg-[#F7D59B] hover:bg-[#d8b475] transition-colors ease-in-out border-[${Colors.dark}]`} onClick={() => setShowSave(true)}>Save Filter</button>
          </div>

          <ModalSave showModal={showSave} setShowModal={setShowSave} filter={filter}/>
          <ModalLoad showModal={showLoad} setShowModal={setShowLoad} setFilter={setFilter} />
        </div>

        {showFilter && (
          <>
            {/* Input fields */}   
            <div className="px-5 py-3 items-center justify-center">
              <div className="grid grid-cols-4 gap-2 max-w-full">
                {/* CBH Master ID */}
                <div className="items-center text-center w-full">
                  <input type="text" value={filter.cbhMasterID.value} className="bg-gray-50 min-w-full rounded-lg px-2 py-1 items-center justify-center shadow-md text-center text-lg" placeholder="CBHMasterID" onChange={e => {
                    const temp = e.currentTarget.value.length > 0 ? e.currentTarget.value : undefined
                    setFilter(filter => ({...filter, cbhMasterID: {value: temp, mandatory: filter.cbhMasterID.mandatory}}))
                  }}/>
                </div>
                {/* CBH Donor ID */}
                <div className="items-center text-center">
                  <input type="text" value={filter.cbhDonorID.value} className="bg-gray-50 min-w-full rounded-lg px-2 py-1  items-center justify-center shadow-md text-center text-lg" placeholder="CBHDonorID" onChange={e => {
                    const temp = e.currentTarget.value.length > 0 ? e.currentTarget.value : undefined
                    setFilter(filter => ({...filter, cbhDonorID: {value: temp, mandatory: filter.cbhDonorID.mandatory}}))
                  }}/>
                </div>
                {/* CBH Sample ID */}
                <div className="items-center text-center">
                  <input type="text" value={filter.cbhSampleID.value} className="bg-gray-50 min-w-full rounded-lg px-2 py-1 items-center justify-center shadow-md text-center text-lg" placeholder="CBHSampleID" onChange={e => {
                    const temp = e.currentTarget.value.length > 0 ? e.currentTarget.value : undefined
                    setFilter(filter => ({...filter, cbhSampleID: {value: temp, mandatory: filter.cbhSampleID.mandatory}}))
                  }}/>
                </div>
                {/* Price */}
                <div className="items-center text-center">
                  <OverlayTrigger trigger="click" placement="bottom" rootClose={true} overlay={
                    <Popover id="popover-basic" className="z-20 bg-white min-w-[10vw] rounded-xl px-2 py-3 border-solid border-2 border-green-900 items-center justify-center shadow-md text-center">
                      <Popover.Body>
                        <div className="grid grid-flow-col auto-cols-max justify-center items-center text-lg gap-3">
                          <div className="col-span-1">
                            Min:
                          </div>
                          <input type="number" value={filter.price.min} className="w-[200px] px-3 py-1 text-lg rounded-full border-2 border-gray-500 focus:border-gray-700 outline-none transition" placeholder="Min price" onChange={e => {
                            const temp = filter.price
                            temp.min = e.currentTarget.value.length > 0 ? parseFloat(e.currentTarget.value) : undefined
                            setFilter(filter => ({...filter, price: temp}))
                          }}/>
                          <div className="col-span-1">
                            Max:
                          </div>
                          <input type="number" value={filter.price.max} className="w-[200px] px-3 py-1 text-lg rounded-full border-2 border-gray-500 focus:border-gray-700 outline-none transition" placeholder="Max price" onChange={e => {
                            const temp = filter.price
                            temp.max = e.currentTarget.value.length > 0 ? parseFloat(e.currentTarget.value) : undefined
                            setFilter(filter => ({...filter, price: temp}))
                          }}/>
                        </div>
                      </Popover.Body>
                    </Popover>
                  }>
                    <button className="border-2 border-solid border-green-900 bg-white py-1 text-lg text-green-900 w-full shadow-md rounded-lg">Price</button>
                  </OverlayTrigger>
                </div>
              </div>
              <div className="grid grid-cols-4 max-w-full gap-2 mt-2">
                {/* General Data */}
                <div className="items-center text-center">
                  <OverlayTrigger trigger="click" placement="bottom" rootClose={true} overlay={
                    <Popover id="popover-basic" className="z-20 bg-white min-w-[10vw] rounded-xl px-2 py-3 border-solid border-2 border-green-900 items-center justify-center shadow-md  text-center">
                      <Popover.Body>
                        <div className="grid grid-flow-col auto-cols-max justify-center items-center text-lg gap-3">
                          <div className="col-span-1">
                            Matrix:
                          </div>
                          <div className="col-span-1">
                            <Autofill value="Matrix" callback={handleFilterChange}/>
                          </div>
                        </div>
                      </Popover.Body>
                    </Popover>
                  }>
                    <button className="border-2 border-solid border-green-900 bg-white py-1 text-lg text-green-900 w-full shadow-md rounded-lg">General Data</button>
                  </OverlayTrigger>
                </div>
                {/* Quantity Information */}
                <div className="items-center text-center">
                  <OverlayTrigger trigger="click" placement="bottom" rootClose={true} overlay={
                    <Popover id="popover-basic" className="z-20 bg-white min-w-[10vw] rounded-xl px-2 py-3 border-solid border-2 border-green-900 items-center justify-center shadow-md  text-center">
                      <Popover.Body>
                        <div className="grid grid-flow-col auto-cols-max justify-center items-center text-lg gap-3">
                          <div className="col-span-1">
                            Min:
                          </div>
                          <input type="number" value={filter.quantity.min} className="w-[200px] px-3 py-1 text-lg rounded-full border-2 border-gray-500 focus:border-gray-700 outline-none transition" placeholder="Min quantity" onChange={e => {
                            const temp = filter.quantity
                            temp.min = e.currentTarget.value.length > 0 ? parseFloat(e.currentTarget.value) : undefined
                            setFilter(filter => ({...filter, quantity: temp}))
                          }}/>
                          <div className="col-span-1">
                            Max:
                          </div>
                          <input type="number" value={filter.quantity.max} className="w-[200px] px-3 py-1 text-lg rounded-full border-2 border-gray-500 focus:border-gray-700 outline-none transition" placeholder="Max quantity" onChange={e => {
                            const temp = filter.quantity
                            temp.max = e.currentTarget.value.length > 0 ? parseFloat(e.currentTarget.value) : undefined
                            setFilter(filter => ({...filter, quantity: temp}))
                          }}/>
                          <div className="col-span-1">
                            Unit:
                          </div>
                          <div className="col-span-1">
                            <Autofill value="Unit" callback={handleFilterChange}/>
                          </div>
                        </div>
                      </Popover.Body>
                    </Popover>
                  }>
                    <button className="border-2 border-solid border-green-900 bg-white py-1 text-lg text-green-900 w-full shadow-md  rounded-lg">Quantity Information</button>
                  </OverlayTrigger>
                </div>
                {/* Laboratory */}
                <div className="items-center text-center">
                  <OverlayTrigger trigger="click" placement="bottom" rootClose={true} overlay={
                    <Popover id="popover-basic" className="z-20 bg-white min-w-[10vw] rounded-xl px-2 py-3 border-solid border-2 border-green-900 items-center justify-center shadow-md  text-center">
                      <Popover.Body>
                        <div className="grid grid-flow-col auto-cols-max justify-center items-center text-lg gap-3">
                          <div className="col-span-1 text-right">
                            Parameter:
                          </div>
                          <div className="col-span-1">
                            <Autofill value="Lab_Parameter" callback={handleFilterChange}/>
                          </div>
                          <div className="col-span-1 text-right">
                            Result Interpretation:
                          </div>
                          <div className="col-span-1">
                            <Autofill value="Result_Interpretation" callback={handleFilterChange}/>
                          </div>
                          <div className="col-span-1">
                            Min:
                          </div>
                          <input type="number" value={filter.price.min} className="w-[200px] px-3 py-1 text-lg rounded-full border-2 border-gray-500 focus:border-gray-700 outline-none transition" placeholder="Min result" onChange={e => {
                            const temp = filter.price
                            temp.min = e.currentTarget.value.length > 0 ? parseFloat(e.currentTarget.value) : undefined
                            setFilter(filter => ({...filter, resultNumerical: temp}))
                          }}/>
                          <div className="col-span-1">
                            Max:
                          </div>
                          <input type="number" value={filter.price.max} className="w-[200px] px-3 py-1 text-lg rounded-full border-2 border-gray-500 focus:border-gray-700 outline-none transition" placeholder="Max result" onChange={e => {
                            const temp = filter.price
                            temp.max = e.currentTarget.value.length > 0 ? parseFloat(e.currentTarget.value) : undefined
                            setFilter(filter => ({...filter, resultNumerical: temp}))
                          }}/>
                          <div className="col-span-1 text-right">
                            Unit:
                          </div>
                          <div className="col-span-1">
                            <Autofill value="Result_Unit" callback={handleFilterChange}/>
                          </div>
                        </div>
                      </Popover.Body>
                    </Popover>
                  }>
                    <button className="border-2 border-solid border-green-900 bg-white py-1 text-lg text-green-900 w-full shadow-md  rounded-lg">Laboratory</button>
                  </OverlayTrigger>
                </div>
                {/* Clinical Diagnosis */}
                <div className="items-center text-center">
                  <OverlayTrigger trigger="click" placement="bottom" rootClose={true} overlay={
                    <Popover id="popover-basic" className="z-20 bg-white min-w-[10vw] rounded-xl px-2 py-3 border-solid border-2 border-green-900 items-center justify-center shadow-md  text-center">
                      <Popover.Body>
                        <div className="grid grid-flow-col auto-cols-max justify-center items-center text-lg gap-3">
                          <div className="col-span-1">
                            Diagnosis:
                          </div>
                          <div className="col-span-1">
                            <Autofill value="Diagnosis" callback={handleFilterChange}/>
                          </div>
                          <div className="col-span-1">
                            ICD Code:
                          </div>
                          <div className="col-span-1">
                            <Autofill value="ICD_Code" callback={handleFilterChange}/>
                          </div>
                        </div>
                      </Popover.Body>
                    </Popover>
                  }>
                    <button className="border-2 border-solid border-green-900 bg-white py-1 text-lg text-green-900 w-full shadow-md  rounded-lg">Diagnosis</button>
                  </OverlayTrigger>
                </div>
              </div>
            </div>

            {/* Displaying active filters */}
            <div className="flex flex-col mx-5 max-w-10xl overflow-x-auto overflow-y-hidden whitespace-normal">
              <span className={`bg-[rgb(174,207,150)] justify-center mx-1 rounded-lg mb-5 px-3 py-2 ${search ? "" : "hidden"}`}>
                Search: {search} <button className="text-xl relative top-1" onClick={() => setSearch(undefined)}><BiX/></button>
              </span>
              <span className={`bg-[rgb(174,207,150)] justify-center mx-1 rounded-lg px-3 py-2 ${filter.matrix.value.length > 0 ? "" : "hidden"}`}>
                Matrix:&nbsp;
                {filter.matrix.value.map((item, i) => (
                  <>
                    <>{(i !== 0) ? (<>, {item}</>) : (<>{item}</>)} </>
                    <button className="text-xl relative top-1" onClick={() => {setFilter((filter) =>( {...filter, matrix: {value: filter.matrix.value.filter((_, index) => index !== i), mandatory: filter.matrix.mandatory }})) }}><BiX/></button>
                  </>
                ))}
                <button className="relative w-fit bg-[rgb(165,207,134)] hover:bg-[rgb(183,224,153)] text-white px-3 py-1 text-lg text-center rounded-2xl outline-none transition" onClick={() => {const temp1 = filter.matrix;  temp1.mandatory = !temp1.mandatory; setFilter(filter => ({...filter, matrix: temp1}))}}>{filter.matrix.mandatory ? "!": "?"}</button>     
                </span>
              <span className={`bg-[rgb(174,207,150)] justify-center mx-1 rounded-lg mb-5 px-3 py-2 ${filter.unit.value.length > 0 ? "" : "hidden"}`}>
                Unit:&nbsp;
                {filter.unit.value.map((item, i) => (
                  <>
                    {(i !== 0) ? (<>, {item}</>) : (<>{item}</>)}
                    <button className="text-xl relative top-1" onClick={() => {setFilter((filter) =>( {...filter, unit: {value: filter.unit.value.filter((_, index) => index !== i), mandatory: filter.unit.mandatory }})) }}><BiX/></button>
                  </>
                  
                ))}
                <button className="relative w-fit bg-[rgb(165,207,134)] hover:bg-[rgb(183,224,153)] text-white px-3 py-1 text-lg text-center rounded-2xl outline-none transition" onClick={() => {const temp2 = filter.unit;  temp2.mandatory = !temp2.mandatory; setFilter(filter => ({...filter, unit: temp2}))}}>{filter.unit.mandatory ? "!": "?"}</button>
              </span>
              <span className={`bg-[rgb(174,207,150)] justify-center mx-1 rounded-lg mb-5 px-3 py-2 ${filter.labParameter.value.length > 0 ? "" : "hidden"}`}>
                Parameter:&nbsp;
                {filter.labParameter.value.map((item, i) => (
                  <>
                    {(i !== 0) ? (<>, {item}</>) : (<>{item}</>)}
                    <button className="text-xl relative top-1" onClick={() => {setFilter((filter) =>( {...filter, labParameter: {value: filter.labParameter.value.filter((_, index) => index !== i), mandatory: filter.labParameter.mandatory }})) }}><BiX/></button>
                  </>
                ))}
                <button className="relative w-fit bg-[rgb(165,207,134)] hover:bg-[rgb(183,224,153)] text-white px-3 py-1 text-lg text-center rounded-2xl outline-none transition" onClick={() => {const temp3 = filter.labParameter;  temp3.mandatory = !temp3.mandatory; setFilter(filter => ({...filter, labParameter: temp3}))}}>{filter.labParameter.mandatory ? "!": "?"}</button>
              </span>
              <span className={`bg-[rgb(174,207,150)] justify-center mx-1 rounded-lg mb-5 px-3 py-2 ${filter.resultInterpretation.value.length > 0 ? "" : "hidden"}`}>
                Res.Interpretation:&nbsp;
                {filter.resultInterpretation.value.map((item, i) => (
                  <>
                    {(i !== 0) ? (<>, {item}</>) : (<>{item}</>)}
                    <button className="text-xl relative top-1" onClick={() => {setFilter((filter) =>( {...filter, resultInterpretation: {value: filter.resultInterpretation.value.filter((_, index) => index !== i), mandatory: filter.resultInterpretation.mandatory }})) }}><BiX/></button>
                  </>
                ))}
                  <button className="relative w-fit bg-[rgb(165,207,134)] hover:bg-[rgb(183,224,153)] text-white px-3 py-1 text-lg text-center rounded-2xl outline-none transition" onClick={() => {const temp4 = filter.resultInterpretation;  temp4.mandatory = !temp4.mandatory; setFilter(filter => ({...filter, resultInterpretation: temp4}))}}>{filter.resultInterpretation.mandatory ? "!": "?"}</button>
              </span>
              <span className={`bg-[rgb(174,207,150)] justify-center mx-1 rounded-lg mb-5 px-3 py-2 ${filter.resultUnit.value.length > 0 ? "" : "hidden"}`}>
                Res.Unit:&nbsp;
                {filter.resultUnit.value.map((item, i) => (
                  <>
                    {(i !== 0) ? (<>, {item}</>) : (<>{item}</>)}
                    <button className="text-xl relative top-1" onClick={() => {setFilter((filter) =>( {...filter, resultUnit: {value: filter.resultUnit.value.filter((_, index) => index !== i), mandatory: filter.resultUnit.mandatory }})) }}><BiX/></button>
                  </>
                ))}
                <button className="relative w-fit bg-[rgb(165,207,134)] hover:bg-[rgb(183,224,153)] text-white px-3 py-1 text-lg text-center rounded-2xl outline-none transition" onClick={() => {const temp5 = filter.resultUnit;  temp5.mandatory = !temp5.mandatory; setFilter(filter => ({...filter, resultUnit: temp5}))}}>{filter.resultUnit.mandatory ? "!": "?"}</button>
              </span>
              <span className={`bg-[rgb(174,207,150)] justify-center mx-1 rounded-lg mb-5 px-3 py-2 ${filter.diagnosis.value.length > 0 ? "" : "hidden"}`}>
                Diagnosis:&nbsp;
                {filter.diagnosis.value.map((item, i) => (
                  <>
                    {(i !== 0) ? (<>, {item}</>) : (<>{item}</>)}
                    <button className="text-xl relative top-1" onClick={() => {setFilter((filter) =>( {...filter, diagnosis: {value: filter.diagnosis.value.filter((_, index) => index !== i), mandatory: filter.diagnosis.mandatory }})) }}><BiX/></button>
                  </>
                ))}
                <button className="relative w-fit bg-[rgb(165,207,134)] hover:bg-[rgb(183,224,153)] text-white px-3 py-1 text-lg text-center rounded-2xl outline-none transition" onClick={() => {const temp6 = filter.diagnosis;  temp6.mandatory = !temp6.mandatory; setFilter(filter => ({...filter, diagnosis: temp6}))}}>{filter.diagnosis.mandatory ? "!": "?"}</button>      
              </span>
              <span className={`bg-[rgb(174,207,150)] justify-center mx-1 rounded-lg mb-5 px-3 py-2 ${filter.ICDCode.value.length > 0 ? "" : "hidden"}`}>
                ICD:&nbsp;
                {filter.ICDCode.value.map((item, i) => (
                  <>
                    {(i !== 0) ? (<>, {item}</>) : (<>{item}</>)}
                    <button className="text-xl relative top-1" onClick={() => {setFilter((filter) =>( {...filter, ICDCode: {value: filter.ICDCode.value.filter((_, index) => index !== i), mandatory: filter.ICDCode.mandatory }})) }}><BiX/></button>
                  </>
                ))}
                <button className="relative w-fit bg-[rgb(165,207,134)] hover:bg-[rgb(183,224,153)] text-white px-3 py-1 text-lg text-center rounded-2xl outline-none transition" onClick={() => {const temp7 = filter.ICDCode;  temp7.mandatory = !temp7.mandatory; setFilter(filter => ({...filter, ICDCode: temp7}))}}>{filter.ICDCode.mandatory ? "!": "?"}</button>      
              </span>
            </div>
          </>
        )}
      </div>
     
      <div className="mx-4 my-2">
          <Table filter={state} page={page} pagelength={pagelength} count={count} optionalSamples={samples} setPage={setPage} setPagelength={setPagelength} expert={false} filterNormal={filter} setFilter={setFilter}/>
      </div>

      <Footer/>
    </div>
  );
};

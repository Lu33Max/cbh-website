import { type NextPage } from "next";
import Head from "next/head";
import { useHookstate } from '@hookstate/core';
import { NormalFilterSchema, type IGroup } from '~/common/filter/filter';

import { api } from "~/utils/api";
import Header from "~/components/overall/header";
import Sidebar from "~/components/overall/sidebar";
import { useCallback, useEffect, useState } from "react";
import { usePathname, useSearchParams } from "next/navigation";

import OverlayTrigger from 'react-bootstrap/OverlayTrigger';
import Popover from 'react-bootstrap/Popover';
import Autofill from "~/components/search/normal/autofill";
import Table from "~/components/search/table";

import { type INormalFilter } from "~/common/filter/filter";
import { BiX } from "react-icons/bi";
import { useRouter } from "next/router";

const defaultGroup: IGroup = {
  not: false,
  link: 'AND',
  activated: true,
  mandatory: true,
  filter: [{
    col: 'CBH_Donor_ID',
    type: 'equal',
    values: [],
    activated: true,
    mandatory: true,
  }],
  groups: []
}

const Search: NextPage = () => {
  return (
    <>
      <Head>
        <title>Central BioHub</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      
      <div className="bg-gray-200 min-h-screen max-h-screen overflow-x-hidden overflow-y-hidden">
        <div className="flex flex-col">
          <Header/>
          <div className="flex flex-row">
            <Sidebar/>
            <Content/>
          </div>
        </div>
      </div>
    </>
  );
};

export default Search;

const Content: React.FC = () => {
  const defaultFilter: INormalFilter = {
    cbhMasterID: {
      value: undefined,
      mandatory: false
    },
    cbhDonorID: {
      value: undefined,
      mandatory: true
    },
    cbhSampleID: {
      value: undefined,
      mandatory: true
    },
    price: { 
      min: undefined, 
      max: undefined,
      mandatory: true
    },
    matrix: {
      value: [],
      mandatory: true
    },
    quantity: {
      min: undefined,
      max: undefined,
      mandatory: true
    },
    unit: {
      value: [],
      mandatory: true
    },
    labParameter: {
      value: [],
      mandatory: true
    }, 
    resultInterpretation: {
      value: [],
      mandatory: true
    }, 
    resultUnit: {
      value: [],
      mandatory: true
    }, 
    resultNumerical: {
      min: undefined,
      max: undefined,
      mandatory: true
    }, 
    diagnosis: {
      value: [],
      mandatory: true
    }, 
    ICDCode: {
      value: [],
      mandatory: true
    } 
  }

  const defaultShow: boolean[] = []

  /*Search Bar function */
  const router = useRouter()
  const pathname = usePathname();
  const { q, f } = router.query
  const [isLoaded, setIsLoaded] = useState<boolean>(false)

  const [page, setPage] = useState<number>(1)
  const [pagelength, setPagelength] = useState<number>(50)
  const [search, setSearch] = useState<string | undefined>()
  const [filter, setFilter] = useState<INormalFilter>(defaultFilter)

  const state = useHookstate<IGroup>(defaultGroup);

  for(let i = 0; i < pagelength; i++){
    defaultShow.push(false)
  }

  const { data: samples, refetch: refetchSamples } = api.samples.getAll.useQuery(
    { pages: page, lines: pagelength, search: search, filter: filter }
  )
  const { data: count } = api.samples.countNormal.useQuery({ search: search, filter: filter })
  
  useEffect(() => {
    void refetchSamples()
  }, [search, page, pagelength, filter, refetchSamples])

  useEffect(() => {
    setSearch(q ? q.toString() : undefined)
  }, [q])

  useEffect(() => {
    if(f !== undefined){
      setFilter(NormalFilterSchema.parse(JSON.parse(f.toString())))
      setIsLoaded(true)
    }
  }, [f])

  useEffect(() => {
    if(isLoaded && !(JSON.stringify(filter) === JSON.stringify(defaultFilter))){
      void router.push(`${pathname}?${search ? encodeURIComponent(search) + "&" : ""}f=${encodeURIComponent(JSON.stringify(filter))}`, undefined, {shallow: true})
    }
  }, [filter, isLoaded])

  function handleFilterChange(value: string, column:string): void {
    switch(column){
      case "Matrix":
        if(!filter.matrix.value.includes(value)){
          const temp1 = filter.matrix
          temp1.value.push(value)
          setFilter(filter => ({...filter, matrix: temp1}))
        }
        break;
      case "Unit":
        if(!filter.unit.value.includes(value)){
          const temp2 = filter.unit
          temp2.value.push(value)
          setFilter(filter => ({...filter, unit: temp2}))
        }
        break;
      case "Lab_Parameter":
        if(!filter.labParameter.value.includes(value)){
          const temp3 = filter.labParameter
          temp3.value.push(value)
          setFilter(filter => ({...filter, labParameter: temp3}))
        }
        break;
      case "Result_Interpretation":
        if(!filter.resultInterpretation.value.includes(value)){
          const temp4 = filter.resultInterpretation
          temp4.value.push(value)
          setFilter(filter => ({...filter, resultInterpretation: temp4}))
        }
        break;
      case "Result_Unit":
        if(!filter.resultUnit.value.includes(value)){
          const temp5 = filter.resultUnit
          temp5.value.push(value)
          setFilter(filter => ({...filter, resultUnit: temp5}))
        }
        break;
      case "Diagnosis":
        if(!filter.diagnosis.value.includes(value)){
          const temp6 = filter.diagnosis
          temp6.value.push(value)
          setFilter(filter => ({...filter, diagnosis: temp6}))
        }
        break;
      case "ICD_Code":
        if(!filter.ICDCode.value.includes(value)){
          const temp7 = filter.ICDCode
          temp7.value.push(value)
          setFilter(filter => ({...filter, ICDCode: temp7}))
        }
        break;
      default:
        break;
    }
  }

  return (
    <div className="max-h-[95vh] overflow-y-scroll w-full overflow-x-hidden font-poppins">
      <h1 className="text-5xl mt-5 ml-5 mb-2 text-green-900"><b>Overall Search</b></h1>

      <p className="px-5 my-7 text-lg">Explore the Abundance and Find the Perfect <b>Human Biospecimens</b> for You! Expert search is a tailor-made solution to improve your search by understanding the precise needs and search 
        behavior of life science scientists and biomedical researchers worldwide. Therefore, we provide you with a wide array of search options, helping to dive deeper into our bio inventory 
        to land on your matching human biospecimens within no time. Our inventory is vast, we offer well-annotated, high-quality biological specimens such as human serum, plasma, whole blood, 
        human tissue samples, and more for research purposes. Explore advanced search options to order human biospecimens online by clicking <b>CLINICAL DIAGNOSIS, ICD 10-CM CODES,</b> and <b>LABORATORY 
        PARAMETERS</b>.</p>
    
      {/* Input fields */}   
      <div className="px-5 py-3 items-center justify-center">
        <div className="grid grid-cols-4 gap-2 max-w-full">
          {/* CBH Master ID */}
          <div className="items-center text-center w-full">
            <input type="text" value={filter.cbhMasterID.value} className="bg-gray-50 min-w-full rounded-lg px-2 py-1 items-center justify-center shadow-md text-center text-lg" placeholder="CBHMasterID" onChange={e => {
              const temp = e.currentTarget.value.length > 0 ? e.currentTarget.value : undefined
              setFilter(filter => ({...filter, cbhMasterID: {value: temp, mandatory: filter.cbhMasterID.mandatory}}))
            }}/>
          </div>
          {/* CBH Donor ID */}
          <div className="items-center text-center">
            <input type="text" value={filter.cbhDonorID.value} className="bg-gray-50 min-w-full rounded-lg px-2 py-1  items-center justify-center shadow-md text-center text-lg" placeholder="CBHDonorID" onChange={e => {
              const temp = e.currentTarget.value.length > 0 ? e.currentTarget.value : undefined
              setFilter(filter => ({...filter, cbhDonorID: {value: temp, mandatory: filter.cbhDonorID.mandatory}}))
            }}/>
          </div>
          {/* CBH Sample ID */}
          <div className="items-center text-center">
            <input type="text" value={filter.cbhSampleID.value} className="bg-gray-50 min-w-full rounded-lg px-2 py-1 items-center justify-center shadow-md text-center text-lg" placeholder="CBHSampleID" onChange={e => {
              const temp = e.currentTarget.value.length > 0 ? e.currentTarget.value : undefined
              setFilter(filter => ({...filter, cbhSampleID: {value: temp, mandatory: filter.cbhSampleID.mandatory}}))
            }}/>
          </div>
          {/* Price */}
          <div className="items-center text-center">
            <OverlayTrigger trigger="click" placement="bottom" rootClose={true} overlay={
              <Popover id="popover-basic" className="z-20 bg-white min-w-[10vw] rounded-xl px-2 py-3 border-solid border-2 border-green-900 items-center justify-center shadow-md text-center">
                <Popover.Body>
                  <div className="grid grid-flow-col auto-cols-max justify-center items-center text-lg gap-3">
                    <div className="col-span-1">
                      Min:
                    </div>
                    <input type="number" value={filter.price.min} className="w-[200px] px-3 py-1 text-lg rounded-full border-2 border-gray-500 focus:border-gray-700 outline-none transition" placeholder="Min price" onChange={e => {
                      const temp = filter.price
                      temp.min = e.currentTarget.value.length > 0 ? parseFloat(e.currentTarget.value) : undefined
                      setFilter(filter => ({...filter, price: temp}))
                    }}/>
                    <div className="col-span-1">
                      Max:
                    </div>
                    <input type="number" value={filter.price.max} className="w-[200px] px-3 py-1 text-lg rounded-full border-2 border-gray-500 focus:border-gray-700 outline-none transition" placeholder="Max price" onChange={e => {
                      const temp = filter.price
                      temp.max = e.currentTarget.value.length > 0 ? parseFloat(e.currentTarget.value) : undefined
                      setFilter(filter => ({...filter, price: temp}))
                    }}/>
                  </div>
                </Popover.Body>
              </Popover>
            }>
              <button className="border-2 border-solid border-green-900 bg-white py-1 text-lg text-green-900 w-full shadow-md rounded-lg">Price</button>
            </OverlayTrigger>
          </div>
        </div>
        <div className="grid grid-cols-4 max-w-full gap-2 mt-2">
          {/* General Data */}
          <div className="items-center text-center">
            <OverlayTrigger trigger="click" placement="bottom" rootClose={true} overlay={
              <Popover id="popover-basic" className="z-20 bg-white min-w-[10vw] rounded-xl px-2 py-3 border-solid border-2 border-green-900 items-center justify-center shadow-md  text-center">
                <Popover.Body>
                  <div className="grid grid-flow-col auto-cols-max justify-center items-center text-lg gap-3">
                    <div className="col-span-1">
                      Matrix:
                    </div>
                    <div className="col-span-1">
                      <Autofill value="Matrix" callback={handleFilterChange}/>
                    </div>
                  </div>
                </Popover.Body>
              </Popover>
            }>
              <button className="border-2 border-solid border-green-900 bg-white py-1 text-lg text-green-900 w-full shadow-md rounded-lg">General Data</button>
            </OverlayTrigger>
          </div>
          {/* Quantity Information */}
          <div className="items-center text-center">
            <OverlayTrigger trigger="click" placement="bottom" rootClose={true} overlay={
              <Popover id="popover-basic" className="z-20 bg-white min-w-[10vw] rounded-xl px-2 py-3 border-solid border-2 border-green-900 items-center justify-center shadow-md  text-center">
                <Popover.Body>
                  <div className="grid grid-flow-col auto-cols-max justify-center items-center text-lg gap-3">
                    <div className="col-span-1">
                      Min:
                    </div>
                    <input type="number" value={filter.quantity.min} className="w-[200px] px-3 py-1 text-lg rounded-full border-2 border-gray-500 focus:border-gray-700 outline-none transition" placeholder="Min quantity" onChange={e => {
                      const temp = filter.quantity
                      temp.min = e.currentTarget.value.length > 0 ? parseFloat(e.currentTarget.value) : undefined
                      setFilter(filter => ({...filter, quantity: temp}))
                    }}/>
                    <div className="col-span-1">
                      Max:
                    </div>
                    <input type="number" value={filter.quantity.max} className="w-[200px] px-3 py-1 text-lg rounded-full border-2 border-gray-500 focus:border-gray-700 outline-none transition" placeholder="Max quantity" onChange={e => {
                      const temp = filter.quantity
                      temp.max = e.currentTarget.value.length > 0 ? parseFloat(e.currentTarget.value) : undefined
                      setFilter(filter => ({...filter, quantity: temp}))
                    }}/>
                    <div className="col-span-1">
                      Unit:
                    </div>
                    <div className="col-span-1">
                      <Autofill value="Unit" callback={handleFilterChange}/>
                    </div>
                  </div>
                </Popover.Body>
              </Popover>
            }>
              <button className="border-2 border-solid border-green-900 bg-white py-1 text-lg text-green-900 w-full shadow-md  rounded-lg">Quantity Information</button>
            </OverlayTrigger>
          </div>
          {/* Laboratory */}
          <div className="items-center text-center">
            <OverlayTrigger trigger="click" placement="bottom" rootClose={true} overlay={
              <Popover id="popover-basic" className="z-20 bg-white min-w-[10vw] rounded-xl px-2 py-3 border-solid border-2 border-green-900 items-center justify-center shadow-md  text-center">
                <Popover.Body>
                  <div className="grid grid-flow-col auto-cols-max justify-center items-center text-lg gap-3">
                    <div className="col-span-1 text-right">
                      Parameter:
                    </div>
                    <div className="col-span-1">
                      <Autofill value="Lab_Parameter" callback={handleFilterChange}/>
                    </div>
                    <div className="col-span-1 text-right">
                      Result Interpretation:
                    </div>
                    <div className="col-span-1">
                      <Autofill value="Result_Interpretation" callback={handleFilterChange}/>
                    </div>
                    <div className="col-span-1">
                      Min:
                    </div>
                    <input type="number" value={filter.price.min} className="w-[200px] px-3 py-1 text-lg rounded-full border-2 border-gray-500 focus:border-gray-700 outline-none transition" placeholder="Min result" onChange={e => {
                      const temp = filter.price
                      temp.min = e.currentTarget.value.length > 0 ? parseFloat(e.currentTarget.value) : undefined
                      setFilter(filter => ({...filter, resultNumerical: temp}))
                    }}/>
                    <div className="col-span-1">
                      Max:
                    </div>
                    <input type="number" value={filter.price.max} className="w-[200px] px-3 py-1 text-lg rounded-full border-2 border-gray-500 focus:border-gray-700 outline-none transition" placeholder="Max result" onChange={e => {
                      const temp = filter.price
                      temp.max = e.currentTarget.value.length > 0 ? parseFloat(e.currentTarget.value) : undefined
                      setFilter(filter => ({...filter, resultNumerical: temp}))
                    }}/>
                    <div className="col-span-1 text-right">
                      Unit:
                    </div>
                    <div className="col-span-1">
                      <Autofill value="Result_Unit" callback={handleFilterChange}/>
                    </div>
                  </div>
                </Popover.Body>
              </Popover>
            }>
              <button className="border-2 border-solid border-green-900 bg-white py-1 text-lg text-green-900 w-full shadow-md  rounded-lg">Laboratory</button>
            </OverlayTrigger>
          </div>
          {/* Clinical Diagnosis */}
          <div className="items-center text-center">
            <OverlayTrigger trigger="click" placement="bottom" rootClose={true} overlay={
              <Popover id="popover-basic" className="z-20 bg-white min-w-[10vw] rounded-xl px-2 py-3 border-solid border-2 border-green-900 items-center justify-center shadow-md  text-center">
                <Popover.Body>
                  <div className="grid grid-flow-col auto-cols-max justify-center items-center text-lg gap-3">
                    <div className="col-span-1">
                      Diagnosis:
                    </div>
                    <div className="col-span-1">
                      <Autofill value="Diagnosis" callback={handleFilterChange}/>
                    </div>
                    <div className="col-span-1">
                      ICD Code:
                    </div>
                    <div className="col-span-1">
                      <Autofill value="ICD_Code" callback={handleFilterChange}/>
                    </div>
                  </div>
                </Popover.Body>
              </Popover>
            }>
              <button className="border-2 border-solid border-green-900 bg-white py-1 text-lg text-green-900 w-full shadow-md  rounded-lg">Diagnosis</button>
            </OverlayTrigger>
          </div>
        </div>
      </div>

      {/* Displaying active filters */}
      <div className="flex flex-col mx-5 max-w-10xl overflow-x-auto overflow-y-hidden whitespace-normal">
        <span className={`bg-[rgb(174,207,150)] justify-center mx-1 rounded-lg mb-5 px-3 py-2 ${search ? "" : "hidden"}`}>
          Search: {search} <button className="text-xl relative top-1" onClick={() => setSearch(undefined)}><BiX/></button>
        </span>
        <span className={`bg-[rgb(174,207,150)] justify-center mx-1 rounded-lg px-3 py-2 ${filter.matrix.value.length > 0 ? "" : "hidden"}`}>
          Matrix:&nbsp;
          {filter.matrix.value.map((item, i) => (
            <>
              <>{(i !== 0) ? (<>, {item}</>) : (<>{item}</>)} </>
              <button className="text-xl relative top-1" onClick={() => {setFilter((filter) =>( {...filter, matrix: {value: filter.matrix.value.filter((_, index) => index !== i), mandatory: filter.matrix.mandatory }})) }}><BiX/></button>
            </>
          ))}
          
        </span>
        <span className={`bg-[rgb(174,207,150)] justify-center mx-1 rounded-lg mb-5 px-3 py-2 ${filter.unit.value.length > 0 ? "" : "hidden"}`}>
          Unit:&nbsp;
          {filter.unit.value.map((item, i) => (
            <>
              {(i !== 0) ? (<>, {item}</>) : (<>{item}</>)}
              <button className="text-xl relative top-1" onClick={() => {setFilter((filter) =>( {...filter, unit: {value: filter.unit.value.filter((_, index) => index !== i), mandatory: filter.unit.mandatory }})) }}><BiX/></button>
            </>
            
          ))}
        </span>
        <span className={`bg-[rgb(174,207,150)] justify-center mx-1 rounded-lg mb-5 px-3 py-2 ${filter.labParameter.value.length > 0 ? "" : "hidden"}`}>
          Parameter:&nbsp;
          {filter.labParameter.value.map((item, i) => (
            <>
              {(i !== 0) ? (<>, {item}</>) : (<>{item}</>)}
              <button className="text-xl relative top-1" onClick={() => {setFilter((filter) =>( {...filter, labParameter: {value: filter.labParameter.value.filter((_, index) => index !== i), mandatory: filter.labParameter.mandatory }})) }}><BiX/></button>
            </>
          ))}
          
        </span>
        <span className={`bg-[rgb(174,207,150)] justify-center mx-1 rounded-lg mb-5 px-3 py-2 ${filter.resultInterpretation.value.length > 0 ? "" : "hidden"}`}>
          Res.Interpretation:&nbsp;
          {filter.resultInterpretation.value.map((item, i) => (
            <>
              {(i !== 0) ? (<>, {item}</>) : (<>{item}</>)}
              <button className="text-xl relative top-1" onClick={() => {setFilter((filter) =>( {...filter, resultInterpretation: {value: filter.resultInterpretation.value.filter((_, index) => index !== i), mandatory: filter.resultInterpretation.mandatory }})) }}><BiX/></button>
            </>
          ))}
          
        </span>
        <span className={`bg-[rgb(174,207,150)] justify-center mx-1 rounded-lg mb-5 px-3 py-2 ${filter.resultUnit.value.length > 0 ? "" : "hidden"}`}>
          Res.Unit:&nbsp;
          {filter.resultUnit.value.map((item, i) => (
            <>
              {(i !== 0) ? (<>, {item}</>) : (<>{item}</>)}
              <button className="text-xl relative top-1" onClick={() => {setFilter((filter) =>( {...filter, resultUnit: {value: filter.resultUnit.value.filter((_, index) => index !== i), mandatory: filter.resultUnit.mandatory }})) }}><BiX/></button>
            </>
          ))}
          
        </span>
        <span className={`bg-[rgb(174,207,150)] justify-center mx-1 rounded-lg mb-5 px-3 py-2 ${filter.diagnosis.value.length > 0 ? "" : "hidden"}`}>
          Diagnosis:&nbsp;
          {filter.diagnosis.value.map((item, i) => (
            <>
              {(i !== 0) ? (<>, {item}</>) : (<>{item}</>)}
              <button className="text-xl relative top-1" onClick={() => {setFilter((filter) =>( {...filter, diagnosis: {value: filter.diagnosis.value.filter((_, index) => index !== i), mandatory: filter.diagnosis.mandatory }})) }}><BiX/></button>
            </>
          ))}
          
        </span>
        <span className={`bg-[rgb(174,207,150)] justify-center mx-1 rounded-lg mb-5 px-3 py-2 ${filter.ICDCode.value.length > 0 ? "" : "hidden"}`}>
          ICD:&nbsp;
          {filter.ICDCode.value.map((item, i) => (
            <>
              {(i !== 0) ? (<>, {item}</>) : (<>{item}</>)}
              <button className="text-xl relative top-1" onClick={() => {setFilter((filter) =>( {...filter, ICDCode: {value: filter.ICDCode.value.filter((_, index) => index !== i), mandatory: filter.ICDCode.mandatory }})) }}><BiX/></button>
            </>
          ))}
          
        </span>
      </div>

      <div className="mx-4 my-2">
        <Table filter={state} page={page} pagelength={pagelength} count={count} samples={samples} setPage={setPage} setPagelength={setPagelength} expert={false} filterNormal={filter} setFilter={setFilter}/>
      </div>
    </div>
  )
}